JAVA = Il linguaggio Java è un linguaggio di programmazione, orientato ad oggetti, contentente strumenti e librerie, progettato per
eseguire codice tramite compilazione in bytecode prima e interpretazione poi da parte di una JVM.


-CLASSE = una classe è un astrazione indicante una serie di oggetti che condividono le stesse caratteristiche e funzionalità
-OGGETTO = è un istanza,ovvero una creazione specifica, di una classe
-METODO = sinonimo di azione, affichè un programma esegua un istruzione deve contenere dei metodi. Una classe senza metodo "main" non può
essere eseguita. Senza metodi gli oggetti non possono comunicare fra di loro.
-VARIABILE = è una porzione di memoria in cui è immagazzinato un certo tipo di dato
-VARIABILE DI ISTANZA = se è dichiarata in una classe, ma al di fuori di un metodo
-VARIABILE LOCALE = se è dichiarata all'interno di un metodo. Essa smetterà di esistere quando terminerà il metodo.
-PARAMETRI = sono le variabili dichiarate all'interno delle parentesi tonde nella dichiarazione di un metodo.
-COSTRUTTORE = è un metodo che ha lo stesso nome della classe, non ha tipo di ritorno, è presente in ogni classe.
-PACKAGE = permette di raggruppare in un'unica entità complessa classi java. Non è altro che una cartella.



//commento su una sola riga
/*
questo è un commento
su più righe
*/


TIPI DI DATI PRIMITIVI :
-tipi interi = byte, short, int, long = possono immagazzinare numeri interi positivi o negativi
-tipi floating point = float , double = tipi di dati a virgola mobile
-tipo testuale = char
-tipo logico-booleano = boolean = true e false


IMPORT= per utilizzare una classe della libreria bisogna prima importarla. Supponiamo di voler utilizzare la classe Date del package 
java.util, dobbiamo scrivere : import.java.util.Date;
Per importante tutte le classi del package si scrive : import.java.util.*;


La classe STRING = le stringhe non sono array di caratteri(char), ma oggetti. Si può instanziare una stringa nei seguenti modi : 
String nome = new String ("mario rossi"); o String nome = "mario rossi";

------------------------------------------------------------------------------

ARRAY = collezione di dati primitivi, o di reference o di altri array. Per utilizzare gli arrayi ci sono tre fasi : dichiarazione,
creazione ed inizializzazione.
Dichiarazione : char alfabeto [];
Creazione : alfabeto = new char [21];
Inizializzazione : alfabeto [0]='a';
alfabeto [1]='b';
alfabeto [2]='c';
Java ci da la possibilità di eseguire tutti e tre i passi per creare un array tramite un unica sintassi :
char alfabeto []= {'a','b','c',....};

LENGHT = variabile che restituisce la lunghezza dell'array : alfabeto.lenght e mi restituirà 21

---------------------------------------------------------------------

IF = testa un espressione booleana e a seconda che risulti vera o falsa, esegue un certo blocco di istruzioni oppure no. 
if (numerodilati ==3)
System.out.println ("Questo è un triangolo");
else
Syste.out.println ("Questo non è un triangolo");

------------------------------------------------------------------

WHILE = questo ciclo permette di iterare uno statement tante volte fino a quando una certa condizione booleana è verificata.
public class...
public static void.....
int i=1;
while (i<=10) {
System.out.println (i);
i++;
}
viene dichiarata e inizializzata a 1 la variabile i,poi inizia il cilo e viene stampato i fino a quando il suo valore non supera 10.
Stampami i fino a quando il suo valore risulta sempre minore o uguale a 10. Quando arriverà a 11 il blocco di codice non verrà eseguito
e l'espressione booleana non verrà verificata.

--------------------------------------------------------------------

FOR = public class.... {
public static void.... {
for (int n=10; n>0; n--) {
system.out.println(n);
}
}
}
stampami i primi dieci numeri partendo da 10 fino ad arrivare a 1

---------------------------------------------------------------------

SWITH = è alternativa al costrutto IF
BREAK = provoca l'immediata uscita dal costrutto
public class swithstagione
public static void.....{
int mese = 4
string stagione;
switch (mese) {
case 12:
case 1:
case 2:
stagione = "inverno";
break;

----------------------------------------------------------------------

MODIFICATORI D'ACCESSO:
PUBLIC = un membro dichiarato pubblico sarà accessibile da una qualisasi classe situata in qualsiasi package. Una classe dichiarata
pubblica sarà anch'essa visibile da un qualsiasi package.
PRIVATE =  restringe la visibilità di un membro di una classe alla classe stessa.
THIS = reference implicito all'oggetto corrente
ABSTRACT = un metodo abstract non implementa un proprio blocco di codice, è privo di comportamento, non definisce parentesi graffe
ma termina con un punto e virgola.
---------------------------------------------------------------------

ERDEITARIETA'= è la caratteristica che mette in relazione di estensibilità più classi che hanno caratteristiche comuni. Il risultato è 
la possibilità di gestire insiemi di classi collettivamente,giacchè accomunate dalle stesse caratteristiche:

public class libro{
public string autore;
public string titolo;
public int npagine;
public int prezzo;
}

public class librosujava{
public string autore;
public string titolo;
public int npagine;
public int prezzo;
public final string ARGOMENTO_TRATTATO= "java";
}

notiamo che libro e librosujava rappresentano due concetti in relazione tra loro, dichiarano campi in comune.L'ereditarietà permette di 
mettere in relazione di estensione le due classi. Diremo che librosujava è sottoclasse di libro, e libro è superclass di librosujava.

public class librosujava extends libro {
public final string ARGOMENTO_TRATTATO="java";
....
}

----------------------------------------------------------------------------

POLIMORFISMO PER METODI = ci permetterù di utilizzare lo stesso nome per metodi differenti, si realizza in due forme : per OVERLOAD(sovraccarico)
e OVERRIDE(riscrittura).

OVERLOAD = si utilizza lo stesso nome per metodi diversi:

public class aritmetica {
public int somma(int a, int b) {
return a+b;
}
public float somma(float a, int b) {
return a+b;
}
public float somma(int a, float b) {
return a+b;
}

In questa classe ci sono 3 metodi che hanno lo stesso nome e svolgono somme, ma in modo differente.

OVERRIDE=














